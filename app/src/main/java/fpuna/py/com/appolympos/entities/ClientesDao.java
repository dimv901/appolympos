package fpuna.py.com.appolympos.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENTES".
*/
public class ClientesDao extends AbstractDao<Clientes, Long> {

    public static final String TABLENAME = "CLIENTES";

    /**
     * Properties of entity Clientes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property NombreTitular = new Property(1, String.class, "nombreTitular", false, "NOMBRE_TITULAR");
        public final static Property CedulaTitular = new Property(2, String.class, "cedulaTitular", false, "CEDULA_TITULAR");
        public final static Property ContactoTitular = new Property(3, String.class, "contactoTitular", false, "CONTACTO_TITULAR");
        public final static Property EmailTitular = new Property(4, String.class, "emailTitular", false, "EMAIL_TITULAR");
        public final static Property RazonSocial = new Property(5, String.class, "razonSocial", false, "RAZON_SOCIAL");
        public final static Property NombreNegocio = new Property(6, String.class, "nombreNegocio", false, "NOMBRE_NEGOCIO");
        public final static Property Ruc = new Property(7, String.class, "ruc", false, "RUC");
        public final static Property EmailNegocio = new Property(8, String.class, "emailNegocio", false, "EMAIL_NEGOCIO");
        public final static Property TelefonoNegocio = new Property(9, String.class, "telefonoNegocio", false, "TELEFONO_NEGOCIO");
        public final static Property Barrio = new Property(10, String.class, "barrio", false, "BARRIO");
        public final static Property CallePrincipal = new Property(11, String.class, "callePrincipal", false, "CALLE_PRINCIPAL");
        public final static Property CalleSecundaria = new Property(12, String.class, "calleSecundaria", false, "CALLE_SECUNDARIA");
        public final static Property NumeroCasa = new Property(13, Integer.class, "numeroCasa", false, "NUMERO_CASA");
        public final static Property Direccion = new Property(14, String.class, "direccion", false, "DIRECCION");
        public final static Property Referencia = new Property(15, String.class, "referencia", false, "REFERENCIA");
        public final static Property Geolocalizado = new Property(16, Boolean.class, "geolocalizado", false, "GEOLOCALIZADO");
        public final static Property Latitud = new Property(17, Double.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(18, Double.class, "longitud", false, "LONGITUD");
        public final static Property Foto = new Property(19, byte[].class, "foto", false, "FOTO");
        public final static Property TieneFoto = new Property(20, Boolean.class, "tieneFoto", false, "TIENE_FOTO");
        public final static Property Lunes = new Property(21, Boolean.class, "lunes", false, "LUNES");
        public final static Property Martes = new Property(22, Boolean.class, "martes", false, "MARTES");
        public final static Property Miercoles = new Property(23, Boolean.class, "miercoles", false, "MIERCOLES");
        public final static Property Jueves = new Property(24, Boolean.class, "jueves", false, "JUEVES");
        public final static Property Viernes = new Property(25, Boolean.class, "viernes", false, "VIERNES");
        public final static Property Sabado = new Property(26, Boolean.class, "sabado", false, "SABADO");
        public final static Property Domingo = new Property(27, Boolean.class, "domingo", false, "DOMINGO");
        public final static Property IdCircuito = new Property(28, Long.class, "idCircuito", false, "ID_CIRCUITO");
        public final static Property IdCiudad = new Property(29, Long.class, "idCiudad", false, "ID_CIUDAD");
        public final static Property IdDepartamento = new Property(30, Long.class, "idDepartamento", false, "ID_DEPARTAMENTO");
        public final static Property IdFormaPago = new Property(31, Long.class, "idFormaPago", false, "ID_FORMA_PAGO");
        public final static Property HoraVisita = new Property(32, String.class, "horaVisita", false, "HORA_VISITA");
        public final static Property Visitado = new Property(33, Boolean.class, "visitado", false, "VISITADO");
    };


    public ClientesDao(DaoConfig config) {
        super(config);
    }
    
    public ClientesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENTES\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOMBRE_TITULAR\" TEXT," + // 1: nombreTitular
                "\"CEDULA_TITULAR\" TEXT," + // 2: cedulaTitular
                "\"CONTACTO_TITULAR\" TEXT," + // 3: contactoTitular
                "\"EMAIL_TITULAR\" TEXT," + // 4: emailTitular
                "\"RAZON_SOCIAL\" TEXT," + // 5: razonSocial
                "\"NOMBRE_NEGOCIO\" TEXT," + // 6: nombreNegocio
                "\"RUC\" TEXT," + // 7: ruc
                "\"EMAIL_NEGOCIO\" TEXT," + // 8: emailNegocio
                "\"TELEFONO_NEGOCIO\" TEXT," + // 9: telefonoNegocio
                "\"BARRIO\" TEXT," + // 10: barrio
                "\"CALLE_PRINCIPAL\" TEXT," + // 11: callePrincipal
                "\"CALLE_SECUNDARIA\" TEXT," + // 12: calleSecundaria
                "\"NUMERO_CASA\" INTEGER," + // 13: numeroCasa
                "\"DIRECCION\" TEXT," + // 14: direccion
                "\"REFERENCIA\" TEXT," + // 15: referencia
                "\"GEOLOCALIZADO\" INTEGER," + // 16: geolocalizado
                "\"LATITUD\" REAL," + // 17: latitud
                "\"LONGITUD\" REAL," + // 18: longitud
                "\"FOTO\" BLOB," + // 19: foto
                "\"TIENE_FOTO\" INTEGER," + // 20: tieneFoto
                "\"LUNES\" INTEGER," + // 21: lunes
                "\"MARTES\" INTEGER," + // 22: martes
                "\"MIERCOLES\" INTEGER," + // 23: miercoles
                "\"JUEVES\" INTEGER," + // 24: jueves
                "\"VIERNES\" INTEGER," + // 25: viernes
                "\"SABADO\" INTEGER," + // 26: sabado
                "\"DOMINGO\" INTEGER," + // 27: domingo
                "\"ID_CIRCUITO\" INTEGER," + // 28: idCircuito
                "\"ID_CIUDAD\" INTEGER," + // 29: idCiudad
                "\"ID_DEPARTAMENTO\" INTEGER," + // 30: idDepartamento
                "\"ID_FORMA_PAGO\" INTEGER," + // 31: idFormaPago
                "\"HORA_VISITA\" TEXT," + // 32: horaVisita
                "\"VISITADO\" INTEGER);"); // 33: visitado
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENTES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Clientes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombreTitular = entity.getNombreTitular();
        if (nombreTitular != null) {
            stmt.bindString(2, nombreTitular);
        }
 
        String cedulaTitular = entity.getCedulaTitular();
        if (cedulaTitular != null) {
            stmt.bindString(3, cedulaTitular);
        }
 
        String contactoTitular = entity.getContactoTitular();
        if (contactoTitular != null) {
            stmt.bindString(4, contactoTitular);
        }
 
        String emailTitular = entity.getEmailTitular();
        if (emailTitular != null) {
            stmt.bindString(5, emailTitular);
        }
 
        String razonSocial = entity.getRazonSocial();
        if (razonSocial != null) {
            stmt.bindString(6, razonSocial);
        }
 
        String nombreNegocio = entity.getNombreNegocio();
        if (nombreNegocio != null) {
            stmt.bindString(7, nombreNegocio);
        }
 
        String ruc = entity.getRuc();
        if (ruc != null) {
            stmt.bindString(8, ruc);
        }
 
        String emailNegocio = entity.getEmailNegocio();
        if (emailNegocio != null) {
            stmt.bindString(9, emailNegocio);
        }
 
        String telefonoNegocio = entity.getTelefonoNegocio();
        if (telefonoNegocio != null) {
            stmt.bindString(10, telefonoNegocio);
        }
 
        String barrio = entity.getBarrio();
        if (barrio != null) {
            stmt.bindString(11, barrio);
        }
 
        String callePrincipal = entity.getCallePrincipal();
        if (callePrincipal != null) {
            stmt.bindString(12, callePrincipal);
        }
 
        String calleSecundaria = entity.getCalleSecundaria();
        if (calleSecundaria != null) {
            stmt.bindString(13, calleSecundaria);
        }
 
        Integer numeroCasa = entity.getNumeroCasa();
        if (numeroCasa != null) {
            stmt.bindLong(14, numeroCasa);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(15, direccion);
        }
 
        String referencia = entity.getReferencia();
        if (referencia != null) {
            stmt.bindString(16, referencia);
        }
 
        Boolean geolocalizado = entity.getGeolocalizado();
        if (geolocalizado != null) {
            stmt.bindLong(17, geolocalizado ? 1L: 0L);
        }
 
        Double latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindDouble(18, latitud);
        }
 
        Double longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindDouble(19, longitud);
        }
 
        byte[] foto = entity.getFoto();
        if (foto != null) {
            stmt.bindBlob(20, foto);
        }
 
        Boolean tieneFoto = entity.getTieneFoto();
        if (tieneFoto != null) {
            stmt.bindLong(21, tieneFoto ? 1L: 0L);
        }
 
        Boolean lunes = entity.getLunes();
        if (lunes != null) {
            stmt.bindLong(22, lunes ? 1L: 0L);
        }
 
        Boolean martes = entity.getMartes();
        if (martes != null) {
            stmt.bindLong(23, martes ? 1L: 0L);
        }
 
        Boolean miercoles = entity.getMiercoles();
        if (miercoles != null) {
            stmt.bindLong(24, miercoles ? 1L: 0L);
        }
 
        Boolean jueves = entity.getJueves();
        if (jueves != null) {
            stmt.bindLong(25, jueves ? 1L: 0L);
        }
 
        Boolean viernes = entity.getViernes();
        if (viernes != null) {
            stmt.bindLong(26, viernes ? 1L: 0L);
        }
 
        Boolean sabado = entity.getSabado();
        if (sabado != null) {
            stmt.bindLong(27, sabado ? 1L: 0L);
        }
 
        Boolean domingo = entity.getDomingo();
        if (domingo != null) {
            stmt.bindLong(28, domingo ? 1L: 0L);
        }
 
        Long idCircuito = entity.getIdCircuito();
        if (idCircuito != null) {
            stmt.bindLong(29, idCircuito);
        }
 
        Long idCiudad = entity.getIdCiudad();
        if (idCiudad != null) {
            stmt.bindLong(30, idCiudad);
        }
 
        Long idDepartamento = entity.getIdDepartamento();
        if (idDepartamento != null) {
            stmt.bindLong(31, idDepartamento);
        }
 
        Long idFormaPago = entity.getIdFormaPago();
        if (idFormaPago != null) {
            stmt.bindLong(32, idFormaPago);
        }
 
        String horaVisita = entity.getHoraVisita();
        if (horaVisita != null) {
            stmt.bindString(33, horaVisita);
        }
 
        Boolean visitado = entity.getVisitado();
        if (visitado != null) {
            stmt.bindLong(34, visitado ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Clientes readEntity(Cursor cursor, int offset) {
        Clientes entity = new Clientes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombreTitular
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cedulaTitular
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contactoTitular
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // emailTitular
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // razonSocial
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nombreNegocio
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ruc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // emailNegocio
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // telefonoNegocio
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // barrio
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // callePrincipal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // calleSecundaria
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // numeroCasa
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // direccion
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // referencia
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // geolocalizado
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // latitud
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // longitud
            cursor.isNull(offset + 19) ? null : cursor.getBlob(offset + 19), // foto
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // tieneFoto
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // lunes
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0, // martes
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // miercoles
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0, // jueves
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // viernes
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // sabado
            cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0, // domingo
            cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28), // idCircuito
            cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29), // idCiudad
            cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30), // idDepartamento
            cursor.isNull(offset + 31) ? null : cursor.getLong(offset + 31), // idFormaPago
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // horaVisita
            cursor.isNull(offset + 33) ? null : cursor.getShort(offset + 33) != 0 // visitado
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Clientes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombreTitular(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCedulaTitular(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContactoTitular(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmailTitular(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRazonSocial(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNombreNegocio(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRuc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmailNegocio(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTelefonoNegocio(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBarrio(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCallePrincipal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCalleSecundaria(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNumeroCasa(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setDireccion(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReferencia(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setGeolocalizado(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setLatitud(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setLongitud(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setFoto(cursor.isNull(offset + 19) ? null : cursor.getBlob(offset + 19));
        entity.setTieneFoto(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setLunes(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setMartes(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0);
        entity.setMiercoles(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setJueves(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
        entity.setViernes(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setSabado(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setDomingo(cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0);
        entity.setIdCircuito(cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28));
        entity.setIdCiudad(cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29));
        entity.setIdDepartamento(cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30));
        entity.setIdFormaPago(cursor.isNull(offset + 31) ? null : cursor.getLong(offset + 31));
        entity.setHoraVisita(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setVisitado(cursor.isNull(offset + 33) ? null : cursor.getShort(offset + 33) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Clientes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Clientes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package fpuna.py.com.appolympos.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCTOS".
*/
public class ProductosDao extends AbstractDao<Productos, Long> {

    public static final String TABLENAME = "PRODUCTOS";

    /**
     * Properties of entity Productos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Descripcion = new Property(1, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property CodigoBarra = new Property(2, String.class, "codigoBarra", false, "CODIGO_BARRA");
        public final static Property PrecioVenta = new Property(3, Double.class, "precioVenta", false, "PRECIO_VENTA");
        public final static Property Cantidad = new Property(4, Double.class, "cantidad", false, "CANTIDAD");
        public final static Property TieneFoto = new Property(5, Boolean.class, "tieneFoto", false, "TIENE_FOTO");
        public final static Property Foto = new Property(6, String.class, "foto", false, "FOTO");
    };


    public ProductosDao(DaoConfig config) {
        super(config);
    }
    
    public ProductosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCTOS\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DESCRIPCION\" TEXT," + // 1: descripcion
                "\"CODIGO_BARRA\" TEXT," + // 2: codigoBarra
                "\"PRECIO_VENTA\" REAL," + // 3: precioVenta
                "\"CANTIDAD\" REAL," + // 4: cantidad
                "\"TIENE_FOTO\" INTEGER," + // 5: tieneFoto
                "\"FOTO\" TEXT);"); // 6: foto
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCTOS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Productos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(2, descripcion);
        }
 
        String codigoBarra = entity.getCodigoBarra();
        if (codigoBarra != null) {
            stmt.bindString(3, codigoBarra);
        }
 
        Double precioVenta = entity.getPrecioVenta();
        if (precioVenta != null) {
            stmt.bindDouble(4, precioVenta);
        }
 
        Double cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindDouble(5, cantidad);
        }
 
        Boolean tieneFoto = entity.getTieneFoto();
        if (tieneFoto != null) {
            stmt.bindLong(6, tieneFoto ? 1L: 0L);
        }
 
        String foto = entity.getFoto();
        if (foto != null) {
            stmt.bindString(7, foto);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Productos readEntity(Cursor cursor, int offset) {
        Productos entity = new Productos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // descripcion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // codigoBarra
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // precioVenta
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // cantidad
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // tieneFoto
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // foto
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Productos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescripcion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCodigoBarra(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrecioVenta(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCantidad(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setTieneFoto(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setFoto(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Productos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Productos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
